using System;
using System.IO;

class FileExplorer
{
    static string currentDirectory = Directory.GetCurrentDirectory();

    static void Main()
    {
        Console.WriteLine("–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫");
        Console.WriteLine($"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {currentDirectory}\n");

        while (true)
        {
            DisplayMenu();
            ProcessCommand();
        }
    }

    static void DisplayMenu()
    {
        Console.WriteLine("\n=== –ú–ï–ù–Æ ===");
        Console.WriteLine("1. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ");
        Console.WriteLine("2. –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª/–∫–∞—Ç–∞–ª–æ–≥");
        Console.WriteLine("3. –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥");
        Console.WriteLine("4. –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª");
        Console.WriteLine("5. –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª/–∫–∞—Ç–∞–ª–æ–≥");
        Console.WriteLine("6. –°–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é");
        Console.WriteLine("0. –í—ã—Ö–æ–¥");
        Console.Write("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
    }

    static void ProcessCommand()
    {
        switch (Console.ReadLine())
        {
            case "1":
                ShowDirectoryContents();
                break;
            case "2":
                OpenFileOrDirectory();
                break;
            case "3":
                CreateDirectory();
                break;
            case "4":
                CreateFile();
                break;
            case "5":
                DeleteItem();
                break;
            case "6":
                ChangeDirectory();
                break;
            case "0":
                Environment.Exit(0);
                break;
            default:
                Console.WriteLine("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!");
                break;
        }
    }

    static void ShowDirectoryContents()
    {
        Console.WriteLine($"\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {currentDirectory}:\n");

        try
        {
            //–ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏
            foreach (var dir in Directory.GetDirectories(currentDirectory))
            {
                Console.WriteLine($"[DIR]  {Path.GetFileName(dir)}");
            }

            //—Ñ–∞–π–ª—ã
            foreach (var file in Directory.GetFiles(currentDirectory))
            {
                Console.WriteLine($"[FILE] {Path.GetFileName(file)}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞: {ex.Message}");
        }
    }

    static void OpenFileOrDirectory()
    {
        Console.Write("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞/–∫–∞—Ç–∞–ª–æ–≥–∞: ");
        string name = Console.ReadLine();
        string path = Path.Combine(currentDirectory, name);

        if (Directory.Exists(path))
        {
            currentDirectory = path;
            Console.WriteLine($"–ü–µ—Ä–µ—à–ª–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥: {currentDirectory}");
            ShowDirectoryContents();
        }
        else if (File.Exists(path))
        {
            try
            {
                Console.WriteLine($"\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {name}:\n");
                Console.WriteLine(File.ReadAllText(path));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("–§–∞–π–ª –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }
    }

    static void CreateDirectory()
    {
        Console.Write("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞: ");
        string dirName = Console.ReadLine();
        string dirPath = Path.Combine(currentDirectory, dirName);

        try
        {
            Directory.CreateDirectory(dirPath);
            Console.WriteLine($"–ö–∞—Ç–∞–ª–æ–≥ {dirName} —Å–æ–∑–¥–∞–Ω");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞: {ex.Message}");
        }
    }

    static void CreateFile()
    {
        Console.Write("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ");
        string fileName = Console.ReadLine();
        string filePath = Path.Combine(currentDirectory, fileName);

        Console.WriteLine("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É):");
        string content = "";
        string line;
        while (!string.IsNullOrWhiteSpace(line = Console.ReadLine()))
        {
            content += line + Environment.NewLine;
        }

        try
        {
            File.WriteAllText(filePath, content);
            Console.WriteLine($"–§–∞–π–ª {fileName} —Å–æ–∑–¥–∞–Ω");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞: {ex.Message}");
        }
    }

    static void DeleteItem()
    {
        Console.Write("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞/–∫–∞—Ç–∞–ª–æ–≥–∞: ");
        string name = Console.ReadLine();
        string path = Path.Combine(currentDirectory, name);

        Console.Write($"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {name}? (y/n): ");
        if (Console.ReadLine().ToLower() != "y") return;

        try
        {
            if (Directory.Exists(path))
            {
                Directory.Delete(path, true);
                Console.WriteLine($"–ö–∞—Ç–∞–ª–æ–≥ {name} —É–¥–∞–ª–µ–Ω");
            }
            else if (File.Exists(path))
            {
                File.Delete(path);
                Console.WriteLine($"–§–∞–π–ª {name} —É–¥–∞–ª–µ–Ω");
            }
            else
            {
                Console.WriteLine("–§–∞–π–ª –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞: {ex.Message}");
        }
    }

    static void ChangeDirectory()
    {
        Console.Write("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ");
        string newDir = Console.ReadLine();

        if (Path.IsPathRooted(newDir))
        {
            if (Directory.Exists(newDir))
                currentDirectory = newDir;
            else
                Console.WriteLine("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
        }
        else if (newDir == "..")
        {
            currentDirectory = Directory.GetParent(currentDirectory)?.FullName ?? currentDirectory;
        }
        else
        {
            string path = Path.Combine(currentDirectory, newDir);
            if (Directory.Exists(path))
                currentDirectory = path;
            else
                Console.WriteLine("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
        }

        Console.WriteLine($"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {currentDirectory}");
    }
}
